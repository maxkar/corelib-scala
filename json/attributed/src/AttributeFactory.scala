package io.github.maxkar
package json.attr

import fun.typeclass.Applicative

import text.Location
import text.input.LocationLookAheadStream

/**
 * An abstraction for generating JSON attributes from the input stream's context.
 * @tparam M operation monad.
 * @tparam S stream type supported by the factory.
 * @tparam A type of the attribute generated by the factory.
 */
trait AttributeFactory[M[_], -S, A]:

  /**
   * Type of the context being captured at the value start position. Values
   * of this type are used to carry-over some context until the value is
   * fully read.
   */
  type Context

  /**
   * Captures all the required information an the
   * **start** of some value in the source stream.
   * @param stream source data stream that could be used to extract information.
   * @return captured context that will later be passed to the `end` function.
   */
  def start(stream: S): M[Context]


  /**
   * Generates the attribute(s) based on the context (captured at the start
   * of the value) and the stream data after the value was read.
   * @param context context returned from the `start` method at the starting position.
   * @param stream source data stream that could be used to extract information.
   * @return attribute that should be applied to the value read between the
   * corresponding `start` and `end` calls.
   */
  def end(context: Context, stream: S): M[A]
end AttributeFactory


object AttributeFactory:
  /** Creates an attribute factory that captures initial (source) location. */
  def location[M[_]: Applicative]: AttributeFactory[M, LocationLookAheadStream[M, Any], Location] =
    new AttributeFactory[M, LocationLookAheadStream[M, Any], Location]:
      type Context = Location
      override def start(
            stream: LocationLookAheadStream[M, Any],
          ): M[Location] =
        Applicative.pure(stream.location)

      override def end(
            context: Location,
            stream: LocationLookAheadStream[M, Any],
          ): M[Location] =
        Applicative.pure(context)
    end new
  end location


  /** Creates an attribute factory that captures element span (i.e. both start and end locations). */
  def span[M[_]: Applicative]: AttributeFactory[M, LocationLookAheadStream[M, Any], (Location, Location)] =
    new AttributeFactory[M, LocationLookAheadStream[M, Any], (Location, Location)]:
      type Context = Location

      override def start(
            stream: LocationLookAheadStream[M, Any],
          ): M[Location] =
        Applicative.pure(stream.location)

      override def end(
            context: Location,
            stream: LocationLookAheadStream[M, Any],
          ): M[(Location, Location)] =
        Applicative.pure((context, stream.location))
    end new
  end span
end AttributeFactory
